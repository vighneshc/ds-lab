#include<stdio.h>  
#include<stdlib.h>  
struct node  
{  
    struct node *prev;  
    struct node *next;  
    int data;  
};  
struct node *head;  
void insertion_beginning();  
void deletion_specified();  
void display();  
void main ()  
{  
int choice =0;  
    while(choice != 9)  
    {  
        
        printf("\n1.Insert at the beginning \n2.Delete from any specified location\n3.Display\n4.Exit\n");  
        printf("\nEnter your choice: \n");  
        scanf("\n%d",&choice);  
        switch(choice)  
        {  
            case 1:  
            insertion_beginning();  
            break;  
            case 2:  
            deletion_specified();  
            break;  
            case 3:  
            display();  
            break;  
            case 4:  
            exit(0);  
            break;  
            default:  
            printf("\n Invalid choice!");  
        }  
    }  
}  
void insertion_beginning()  
{  
   struct node *ptr;   
   int item;  
   ptr = (struct node *)malloc(sizeof(struct node));  
   if(ptr == NULL)  
   {  
       printf("\n OVERFLOW!\n");  
   }  
   else  
   {  
    printf("\nEnter value to be inserted: \n");  
    scanf("%d",&item);  
      
   if(head==NULL)  
   {  
       ptr->next = NULL;  
       ptr->prev=NULL;  
       ptr->data=item;  
       head=ptr;  
   }  
   else   
   {  
       ptr->data=item;  
       ptr->prev=NULL;  
       ptr->next = head;  
       head->prev=ptr;  
       head=ptr;  
   }  
   printf("\nNode inserted\n");  
}  
     
}  
void deletion_specified()  
{  
    struct node *ptr, *temp;  
    int val;  
    printf("\nEnter the data after which the node is to be deleted: \n");  
    scanf("%d", &val);  
    ptr = head;  
    while(ptr -> data != val)  
    ptr = ptr -> next;  
    if(ptr -> next == NULL)  
    {  
        printf("\nCan't be deleted!\n");  
    }  
    else if(ptr -> next -> next == NULL)  
    {  
        ptr ->next = NULL;  
        printf("\nNode deleted\n");
    }  
    else  
    {   
        temp = ptr -> next;  
        ptr -> next = temp -> next;  
        temp -> next -> prev = ptr;  
        free(temp);  
        printf("\nNode deleted\n");  
    }     
}  
void display()  
{  
    struct node *ptr;  
  if (head == NULL)
{
printf("\nThe List is Empty!\n");  
}
else
{
    if(head == NULL)  
    
    printf("\nThe values in the Doubly Linked list are:\n");  
    ptr = head;  
    while(ptr != NULL)  
    {  
        printf("%d\t",ptr->data);  
        ptr=ptr->next;  
    }  
}
}   
